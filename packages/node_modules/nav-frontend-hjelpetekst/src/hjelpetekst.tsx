import * as React from 'react';
import * as PT from 'prop-types';
import * as classnames from 'classnames';
import { guid, keyCodes } from 'nav-frontend-js-utils';
import { Normaltekst } from 'nav-frontend-typografi';
import Popover, { Manager, Reference, Popper, PopperProps, PopoverOrientering } from 'nav-frontend-popover';
import Ikon from 'nav-frontend-ikoner-assets';

import 'nav-frontend-hjelpetekst-style';

export interface HjelpetekstProps {
    /**
     * Egendefinert klassenavn.
     */
    className?: string;
    /**
     * Bestemmer om hjelpetekst-vinduet skal være åpent som default.
     */
    åpen?: boolean;
    /**
     * Posisjon på hjelpetekst-vinduet.
     */
    type?: PopoverOrientering;
    /**
     * Props til intern Popper instans.
     */
    popperProps?: PopperProps;
}

interface State {
    åpen: boolean;
}

class Hjelpetekst extends React.Component<HjelpetekstProps, State> {
    static defaultProps: Partial<HjelpetekstProps> = {
        type: 'top',
        åpen: false
    };

    private åpneKnapp: HTMLButtonElement;
    private popoverInnerRef: HTMLDivElement;
    private popoverId: string;

    constructor(props) {
        super(props);

        this.state = {
            åpen: !!this.props.åpen
        };

        this.popoverId = guid();

        window.addEventListener('click', this.handleClick);
    }

    componentWillUnmount(){
        window.removeEventListener('click', this.handleClick);
    }

    checkFocus = () => {
        if (!this.state.åpen) return;

        window.setTimeout(() => {
            const focusElement = document.activeElement;
            if (
                focusElement === this.popoverInnerRef ||
                focusElement === this.åpneKnapp ||
                (this.popoverInnerRef.contains && this.popoverInnerRef.contains(focusElement))
            ) {
                return;
            }
            this.togglePopover();
        }, 0); // tslint:disable-line:align
    }

    handleKeydown = (e) => {
        if (e.keyCode === keyCodes.tab) this.checkFocus();
        if (e.keyCode === keyCodes.esc) this.togglePopover();
    }

    handleClick = (e) => {
        if (!this.state.åpen) return;
        if (
            (e.target !== this.åpneKnapp) &&
            (!this.åpneKnapp.contains(e.target))
        ) {
            this.togglePopover();
        }
    }

    togglePopover = () => {
        this.setState(
            { åpen: !this.state.åpen },
            () => {
                if (this.state.åpen) {
                    window.addEventListener('keydown', this.handleKeydown);
                } else {
                    window.removeEventListener('keydown', this.handleKeydown);
                }
            }
        );
    }

    render() {
        const { children, className, åpen, type, popperProps, ...rest } = this.props;
        // const popperModifiers = {
        //     preventOverflow: {
        //         boundariesElement: "viewport",
        //         escapeWithReference: true
        //     }
        // };

        return (
            <div className={classnames('hjelpetekst', className)}>
                <Manager>
                    <Reference>
                        {({ ref }) => (
                            <button
                                type="button"
                                ref={(node) => {
                                    this.åpneKnapp = node!;
                                    ref(node);
                                }}
                                className="hjelpetekst__apneknapp"
                                onClick={(e) => {
                                    this.togglePopover();
                                }}
                                aria-pressed={this.state.åpen}
                                aria-controls={this.popoverId}
                                { ...rest }
                            >
                                <Ikon kind="help-circle" />
                            </button>
                        )}
                    </Reference>
                    {
                        this.state.åpen &&
                        <Popper placement={type}>
                            {({ ref, style, placement, arrowProps }) => (
                                <Popover
                                    id={this.popoverId}
                                    innerRef={(node) => {
                                        this.popoverInnerRef = node!;
                                        ref(node);
                                    }}
                                    style={style}
                                    pilProps={arrowProps}
                                    orientering={placement}
                                >
                                    <div className="hjelpetekst__innhold">
                                        {children}
                                    </div>
                                </Popover>
                            )}
                        </Popper>
                    }
                </Manager>
            </div>
        );
    }
}

export default Hjelpetekst;
